input_choice_real =
   (
      ## Constant value
      element constant {
         real
      }|
      ## Python function prescribing real input. Functions should be of the form:
      ##
      ## def val(x, t):
      ##     # The argument 't' is the current simulation time and may also be used in the expression,
      ##     # along with x[0], x[1] and x[2], the x, y and z coordinates of the mesh.
      ##     return sin(x[0]*t)
      element python {
         python_code
      }|
      ## Python function prescribing real input, given as a C++ string. Functions should be of the form:
      ##
      ## def val():
      ##     # String containing the input as C++ code.
      ##     # 't' is the current simulation time and may also be used in the expression,
      ##     # along with x[0], x[1] and x[2], the x, y and z coordinates of the mesh.
      ##     return "sin(x[0]*t)"
      element cpp {
         python_code
      }
   )

input_choice_real_dim_vector =
   (
      ## Constant value
      element constant {
         real_dim_vector
      }|
      ## Python function prescribing real input. Functions should be of the form:
      ##
      ## def val(x, t):
      ##     # The argument 't' is the current simulation time and may also be used in the expression,
      ##     # along with x[0], x[1] and x[2], the x, y and z coordinates of the mesh.
      ##     # For vectors, the function should return a list or tuple of length equal to that of the problem's dimension.
      ##     return [sin(x[0]*t), cos(x[1]*t)]
      element python {
         python_code
      }|
      ## Python function prescribing real input, given as a C++ string. Functions should be of the form:
      ##
      ## def val():
      ##     # String containing the input as C++ code.
      ##     # 't' is the current simulation time and may be used in the expression,
      ##     # along with x[0], x[1] and x[2], the x, y and z coordinates of the mesh.
      ##     # For vectors, the function should return a list or tuple (of strings) length equal to that of the problem's dimension.
      ##     return ["sin(x[0]*t)", "cos(x[1]*t)"]
      element cpp {
         python_code
      }
   )

